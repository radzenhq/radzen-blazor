@using Radzen
@using Radzen.Blazor
@using Radzen.Blazor.Rendering
@inject DialogService DialogService
@inherits DropableViewBase


<div class="rz-view rz-month-view">
    <div class="rz-view-header">
        @for (var date = StartDate; date <= StartDate.EndOfWeek(); date = date.AddDays(1))
        {
            <div class="rz-slot-header">
                @date.ToString("ddd", Scheduler.Culture)
            </div>
        }
    </div>
    @{
        var days = 0;
        var points = new Dictionary<AppointmentData, double>();
    }
    <div @ref=contentView class="rz-view-content" tabindex="0" @onkeydown="@(args => OnKeyPress(args))" @onkeydown:preventDefault="@preventKeyPress" @onkeydown:stopPropagation
         @onfocus=@(args => {if(CurrentDate == default(DateTime)) { CurrentDate = StartDate; }})>
    @for (var date = StartDate; date < EndDate; date = date.AddDays(7))
    {
        <div class="rz-week">
            <div class="rz-events">
                @for (var start = date; start < date.AddDays(7); start = start.AddDays(1))
                {
                    var end = start.AddDays(1);
                    var appointments = AppointmentsInSlot(start, end);
                    var excessCount = appointments.Count() - MaxAppointmentsInSlot;
                    var existingTops = ExistingTops(points, appointments.Take(MaxAppointmentsInSlot));
                    var appointmentsToRender = appointments.Take(MaxAppointmentsInSlot).ToList();

                    @foreach(var item in appointmentsToRender)
                    {
                        var slotIndex = item.Start.Date.Subtract(date).Days;
                        var slotWidth = 100 / 7.0;
                        var left = slotIndex * slotWidth;
                        var length = Math.Max(1, Math.Ceiling(item.End.Subtract(date).TotalDays) - slotIndex);
                        var width = item.End <= date.AddDays(7) ? (length) * slotWidth : (7 - slotIndex) * slotWidth;
                        if (!points.TryGetValue(item, out var top))
                        {
                            top = DetermineTop(existingTops);
                            points.Add(item, top);
                            existingTops.Add(top);
                        }
                        var height = 1.5;
                        var data = item;

                        @if (item.Start >= start && item.Start <= end)
                        {
                            <Appointment Data=@item Top=@top Left=@left Width=@width Height=@height Click=@OnAppointmentClick
                                CssClass="@(CurrentDate >= start && CurrentDate <= end && object.Equals(currentAppointments?.ElementAtOrDefault(currentAppointment),item) ? "rz-state-focused" : "")"
                                DragStart=@OnAppointmentDragStart />
                        }
                        else if (start == date)
                        {
                            left = 0;
                            length = Math.Max(1, Math.Min(7, Math.Ceiling(item.End.Subtract(date).TotalDays)));
                            width = length * slotWidth;

                            <Appointment Data=@item Top=@top Left=@left Width=@width Height=@height Click=@OnAppointmentClick
                                CssClass="@(CurrentDate == date && object.Equals(currentAppointments?.ElementAtOrDefault(currentAppointment),item) ? "rz-state-focused" : "")"
                                DragStart=@OnAppointmentDragStart />
                        }
                    }

                    @if (excessCount > 0)
                    {
                        var slotIndex = start.Subtract(date).Days;
                        var slotWidth = 100 / 7.0;
                        var left = slotIndex * slotWidth;
                        var top = 1.5 * (MaxAppointmentsInSlot + 1);
                        var listDate = start;
                        <a class="rz-event-list-btn" style="top: @(top.ToInvariantString())rem; left: @(left.ToInvariantString())%" @onclick=@(args => OnListClick(listDate, appointments))>@String.Format(MoreText, excessCount)</a>
                    }
                }
            </div>
            <div class="rz-slots">
            @for (var day = 0; day < 7; day ++)
            {
                var dayOfWeek = StartDate.AddDays(days++);
                <div @onclick="@(args => OnSlotClick(dayOfWeek))" ondragover="event.preventDefault();" @ondrop=@(args => @OnDrop(dayOfWeek)) @attributes=@Attributes(dayOfWeek)>
                    <div class="rz-slot-title @(dayOfWeek == CurrentDate ? " rz-state-focused" : "")" @onclick=@(args => OnDayClick(dayOfWeek)) @onclick:stopPropagation>
                        @dayOfWeek.Day
                    </div>
                </div>
            }
            </div>
        </div>
    }
    </div>
</div>

@code {
    [Parameter]
    public DateTime StartDate { get; set; }

    [Parameter]
    public DateTime EndDate { get; set; }

    [Parameter]
    public int MaxAppointmentsInSlot { get; set; }

    [Parameter]
    public string MoreText { get; set; }

    [CascadingParameter]
    public IScheduler Scheduler { get; set; }

    [Parameter]
    public IEnumerable<AppointmentData> Appointments { get; set; }

    IDictionary<string, object> Attributes(DateTime start)
    {
        var attributes = Scheduler.GetSlotAttributes(start, start.AddDays(1));
        attributes["class"] = ClassList.Create("rz-slot").Add(attributes).ToString();
        attributes["dropzone"] = "move";
        return attributes;
    }

    async Task OnSlotClick(DateTime date)
    {
        await Scheduler.SelectSlot(date, date.AddDays(1), AppointmentsInSlot(date, date.AddDays(1)));
    }

    async Task OnDayClick(DateTime day)
    {
        await Scheduler.SelectDay(day, AppointmentsInSlot(day, day.AddDays(1)));
    }

    double DetermineTop(HashSet<double> existingTops)
    {
        var top = 1.5;

        while (existingTops.Contains(top))
        {
            top += 1.5;
        }

        return top;
    }

    HashSet<double> ExistingTops(IDictionary<AppointmentData, double> tops, IEnumerable<AppointmentData> appointments)
    {
        var existingTops = new HashSet<double>();

        foreach (var appointment in appointments)
        {
            if (tops.TryGetValue(appointment, out var existingTop))
            {
                existingTops.Add(existingTop);
            }
        }

        return existingTops;
    }

    ElementReference contentView;

    async Task OnAppointmentClick(AppointmentData data)
    {
        await Scheduler.SelectAppointment(data);
        await contentView.FocusAsync();
    }

    private AppointmentData[] AppointmentsInSlot(DateTime start, DateTime end)
    {
        if (Appointments == null)
        {
            return Array.Empty<AppointmentData>();
        }

        return Appointments.Where(item => Scheduler.IsAppointmentInRange(item, start, end))
                   .OrderByDescending(item => item.End.Subtract(item.Start).TotalDays > 1)
                   .ThenBy(item => item.Start)
                   .ThenByDescending(item => item.End)
                   .ToArray();
    }

    async Task OnListClick(DateTime date, IEnumerable<AppointmentData> appointments)
    {
        bool preventDefault = await Scheduler.SelectMore(date, date.AddDays(1), appointments);

        if (!preventDefault)
        {
            await DialogService.OpenAsync(date.ToString("d", Scheduler.Culture), ds =>
                @<div class="rz-event-list">
                    <CascadingValue Value=@Scheduler>
                        @foreach(var item in appointments)
                        {
                            <Appointment Data=@item Click="OnListEventClick" />
                        }
                    </CascadingValue>
                </div>
            );
        }
    }

    async Task OnListEventClick(AppointmentData data)
    {
        DialogService.Close();

        await OnAppointmentClick(data);
    }

    DateTime CurrentDate;
    int currentAppointment = -1;
    IEnumerable<AppointmentData> currentAppointments = Enumerable.Empty<AppointmentData>();
    bool preventKeyPress = false;

    async Task OnKeyPress(KeyboardEventArgs args)
    {
        var key = args.Code != null ? args.Code : args.Key;
        var arrow = key == "ArrowLeft" || key == "ArrowRight" || key == "ArrowUp" || key == "ArrowDown";
        var updown = key == "ArrowUp" || key == "ArrowDown";
        var leftright = key == "ArrowLeft" || key == "ArrowRight";
        var leftup = key == "ArrowLeft" || key == "ArrowUp";

        if (arrow && !currentAppointments.Any())
        {
            var days = leftright ? 1 : 7;
            CurrentDate = CurrentDate.AddDays(leftup ? -days : days);
            currentAppointments = AppointmentsInSlot(CurrentDate, CurrentDate.AddDays(1)).Take(MaxAppointmentsInSlot);

            preventKeyPress = true;
        }
        else if (arrow && currentAppointments.Any())
        {
            if (updown)
            {
                currentAppointment = Math.Clamp(currentAppointment + (key == "ArrowUp" ? -1 : 1), 0, currentAppointments.Count() - 1);
            }
            else
            {
                CurrentDate = CurrentDate.AddDays(key == "ArrowLeft" ? -1 : 1);
                currentAppointments = AppointmentsInSlot(CurrentDate, CurrentDate.AddDays(1)).Take(MaxAppointmentsInSlot);
            }

            preventKeyPress = true;
        }
        else if (key == "Enter")
        {
            await OnSlotClick(CurrentDate);
            await contentView.FocusAsync();

            preventKeyPress = true;
        }
        else if (key == "Space")
        {
            var appointment = currentAppointments.ElementAtOrDefault(currentAppointment);
            if (appointment != null)
            {
                await OnAppointmentClick(appointment);
            }

            preventKeyPress = true;
        }
        else
        {
            preventKeyPress = false;
        }
    }
}