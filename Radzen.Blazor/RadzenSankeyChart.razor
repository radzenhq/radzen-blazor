@using Microsoft.JSInterop
@using Radzen.Blazor
@using Radzen.Blazor.Rendering
@using System.Linq

@inherits RadzenComponent
@if (Visible)
{
    <CascadingValue Value="@this">
        @ChildContent
    </CascadingValue>
    <div @ref="Element" @attributes="@Attributes" class="@GetCssClass()" style="@Style" id="@GetId()">
        @if (ActualWidth > 0 && ActualHeight > 0)
        {
            <svg style="width: 100%; height: 100%; overflow: visible;">
                <g transform="@($"translate({MarginLeft.ToInvariantString()}, {MarginTop.ToInvariantString()})")">
                    @if (ComputedNodes != null && ComputedLinks != null)
                    {
                        @foreach (var link in ComputedLinks)
                        {
                            var linkClass = "rz-sankey-link";
                            var linkFill = link.Fill;
                            
                            // If no explicit fill and source node uses color scheme, use color scheme for link too
                            if (string.IsNullOrEmpty(linkFill) && link.SourceNode != null)
                            {
                                if (string.IsNullOrEmpty(link.SourceNode.Fill))
                                {
                                    // Source node uses color scheme
                                    linkClass = $"rz-sankey-link rz-series-item-{link.SourceNode.ColorIndex}";
                                    linkFill = null; // Let CSS handle it
                                }
                                else
                                {
                                    // Source node has explicit fill
                                    linkFill = link.SourceNode.Fill;
                                    // Add transparency if not already present
                                    if (linkFill != null && linkFill.Length == 7 && linkFill.StartsWith("#"))
                                    {
                                        linkFill = linkFill + "80"; // Add 50% transparency
                                    }
                                }
                            }
                            else if (!string.IsNullOrEmpty(linkFill))
                            {
                                // Link has explicit fill
                                // Add transparency if not already present
                                if (linkFill.Length == 7 && linkFill.StartsWith("#"))
                                {
                                    linkFill = linkFill + "80"; // Add 50% transparency
                                }
                            }
                            
                            <path d="@link.Path" 
                                  fill="@linkFill" 
                                  stroke="none" 
                                  class="@linkClass" />
                        }
                        
                        @foreach (var node in ComputedNodes)
                        {
                            var nodeClass = string.IsNullOrEmpty(node.Fill) 
                                ? $"rz-sankey-node rz-series-item-{node.ColorIndex}" 
                                : "rz-sankey-node";
                            
                            <g class="@nodeClass">
                                <rect x="@node.X.ToInvariantString()" 
                                      y="@node.Y.ToInvariantString()" 
                                      width="@node.Width.ToInvariantString()" 
                                      height="@node.Height.ToInvariantString()"
                                      fill="@(node.Fill)"
                                      stroke="@(node.Stroke)"
                                      stroke-width="1" />
                                @if (!string.IsNullOrEmpty(node.Label))
                                {
                                    var isLeftSide = node.Layer == 0;
                                    var isRightSide = node.Layer == (ComputedNodes.Max(n => n.Layer));
                                    var textX = isLeftSide ? node.X - 5 : (isRightSide ? node.X + node.Width + 5 : node.X + node.Width / 2);
                                    var textAnchor = isLeftSide ? "end" : (isRightSide ? "start" : "middle");
                                    
                                    <Radzen.Blazor.Rendering.Text Position="@(new Point { X = textX, Y = node.Y + node.Height / 2 })"
                                                                   TextAnchor="@textAnchor"
                                                                   Class="rz-sankey-node-label"
                                                                   Value="@node.Label">
                                    </Radzen.Blazor.Rendering.Text>
                                }
                            </g>
                        }
                    }
                </g>
            </svg>
        }
    </div>
}

@code {
    /// <summary>
    /// Gets or sets the child content of the component.
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// Gets or sets the data nodes.
    /// </summary>
    [Parameter]
    public IEnumerable<SankeyNode> Nodes { get; set; }

    /// <summary>
    /// Gets or sets the data links.
    /// </summary>
    [Parameter]
    public IEnumerable<SankeyLink> Links { get; set; }

    /// <summary>
    /// Gets or sets the width.
    /// </summary>
    [Parameter]
    public double Width { get; set; } = 800;

    /// <summary>
    /// Gets or sets the height.
    /// </summary>
    [Parameter]
    public double Height { get; set; } = 400;

    /// <summary>
    /// Gets or sets the left margin.
    /// </summary>
    [Parameter]
    public double MarginLeft { get; set; } = 60;

    /// <summary>
    /// Gets or sets the top margin.
    /// </summary>
    [Parameter]
    public double MarginTop { get; set; } = 10;

    /// <summary>
    /// Gets or sets the right margin.
    /// </summary>
    [Parameter]
    public double MarginRight { get; set; } = 60;

    /// <summary>
    /// Gets or sets the bottom margin.
    /// </summary>
    [Parameter]
    public double MarginBottom { get; set; } = 10;

    /// <summary>
    /// Gets or sets the node width.
    /// </summary>
    [Parameter]
    public double NodeWidth { get; set; } = 24;

    /// <summary>
    /// Gets or sets the node padding.
    /// </summary>
    [Parameter]
    public double NodePadding { get; set; } = 8;

    /// <summary>
    /// Gets or sets the node alignment.
    /// </summary>
    [Parameter]
    public SankeyAlignment NodeAlignment { get; set; } = SankeyAlignment.Justify;

    /// <summary>
    /// Gets or sets the node sort function.
    /// </summary>
    [Parameter]
    public Func<SankeyNode, SankeyNode, int> NodeSort { get; set; }

    /// <summary>
    /// Gets or sets the link sort function.
    /// </summary>
    [Parameter]
    public Func<SankeyLink, SankeyLink, int> LinkSort { get; set; }

    /// <summary>
    /// Gets the computed nodes with layout.
    /// </summary>
    public IList<ComputedSankeyNode> ComputedNodes { get; private set; }

    /// <summary>
    /// Gets the computed links with paths.
    /// </summary>
    public IList<ComputedSankeyLink> ComputedLinks { get; private set; }


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        ComputeLayout();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        // Ensure visibility
        Visible = true;
    }

    private string layoutError = "";
    
    private void ComputeLayout()
    {
        layoutError = "";
        
        if (Nodes == null || Links == null || ActualWidth <= 0 || ActualHeight <= 0)
        {
            ComputedNodes = null;
            ComputedLinks = null;
            return;
        }

        try
        {
            var layoutWidth = ActualWidth - MarginLeft - MarginRight;
            var layoutHeight = ActualHeight - MarginTop - MarginBottom;
            
            // Ensure positive dimensions
            layoutWidth = Math.Max(100, layoutWidth);
            layoutHeight = Math.Max(100, layoutHeight);
            
            var layout = new SankeyLayout
            {
                Width = layoutWidth,
                Height = layoutHeight,
                NodeWidth = NodeWidth,
                NodePadding = NodePadding,
                NodeAlignment = NodeAlignment,
                NodeSort = NodeSort,
                LinkSort = LinkSort
            };

            (ComputedNodes, ComputedLinks) = layout.Compute(Nodes, Links);
            
            // Assign color indexes to nodes without explicit fill colors
            if (ComputedNodes != null)
            {
                var colorIndex = 0;
                foreach (var node in ComputedNodes)
                {
                    if (string.IsNullOrEmpty(node.Fill))
                    {
                        node.ColorIndex = colorIndex++;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            layoutError = ex.Message;
            ComputedNodes = null;
            ComputedLinks = null;
        }
    }
}