@typeparam TItem
@inherits RadzenComponent
@implements IDisposable
@using Radzen.Blazor.Rendering
@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Components.Web

@code {
    /// <summary>
    /// Gets or sets the data for this series.
    /// </summary>
    [Parameter]
    public IEnumerable<TItem> Data { get; set; }

    /// <summary>
    /// Gets or sets the property that provides the category values for this series.
    /// </summary>
    [Parameter]
    public string CategoryProperty { get; set; }

    /// <summary>
    /// Gets or sets the property that provides the values for this series.
    /// </summary>
    [Parameter]
    public string ValueProperty { get; set; }

    /// <summary>
    /// Gets or sets the series title.
    /// </summary>
    [Parameter]
    public string Title { get; set; }

    /// <summary>
    /// Gets or sets the value formatter function.
    /// </summary>
    [Parameter]
    public Func<double, string> ValueFormatter { get; set; }

    /// <summary>
    /// Gets or sets the format string for values.
    /// </summary>
    [Parameter]
    public string FormatString { get; set; }

    /// <summary>
    /// Gets or sets the stroke width for this series.
    /// </summary>
    [Parameter]
    public double StrokeWidth { get; set; } = 2;

    /// <summary>
    /// Gets or sets whether markers are visible for this series.
    /// </summary>
    [Parameter]
    public bool MarkersVisible { get; set; } = true;

    /// <summary>
    /// Gets or sets the marker size for this series.
    /// </summary>
    [Parameter]
    public double MarkerSize { get; set; } = 6;

    [CascadingParameter]
    public RadzenSpiderChart<TItem> Chart { get; set; }

    private bool _registered;

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        if (Chart != null && !_registered)
        {
            _registered = true;
            Chart.AddSeries(this);
        }
    }

    /// <summary>
    /// Disposes the component and removes it from the parent chart.
    /// </summary>
    public new void Dispose()
    {
        if (Chart != null && _registered)
        {
            _registered = false;
            Chart.RemoveSeries(this);
        }
        base.Dispose();
    }

    /// <summary>
    /// Gets whether the series is visible.
    /// </summary>
    public bool IsVisible { get; set; } = true;

    /// <summary>
    /// Gets the series index in the chart.
    /// </summary>
    internal int Index { get; set; }

    /// <summary>
    /// Measures the legend text width for this series.
    /// </summary>
    public double MeasureLegend()
    {
        if (string.IsNullOrEmpty(Title))
        {
            return 0;
        }

        return TextMeasurer.TextWidth(Title);
    }

    /// <summary>
    /// Renders the legend item for this series.
    /// </summary>
    public RenderFragment RenderLegendItem() => RenderLegendItem(true);

    /// <summary>
    /// Renders the legend item for this series.
    /// </summary>
    protected virtual RenderFragment RenderLegendItem(bool clickable) => builder =>
    {
        var style = new List<string>();

        if (!IsVisible)
        {
            style.Add("text-decoration: line-through");
            style.Add("opacity: 0.5");
        }

        builder.OpenComponent<LegendItem>(0);
        builder.AddAttribute(1, nameof(LegendItem.Index), Index);
        builder.AddAttribute(2, nameof(LegendItem.Color), $"var(--rz-series-{Index})");
        builder.AddAttribute(3, nameof(LegendItem.MarkerType), MarkerType.Circle);
        builder.AddAttribute(4, nameof(LegendItem.Style), string.Join(";", style));
        builder.AddAttribute(5, nameof(LegendItem.MarkerSize), MarkerSize);
        builder.AddAttribute(6, nameof(LegendItem.Text), Title);
        builder.AddAttribute(7, nameof(LegendItem.Click), EventCallback.Factory.Create(this, OnLegendItemClick));
        builder.AddAttribute(8, nameof(LegendItem.Clickable), clickable);
        builder.CloseComponent();
    };

    /// <summary>
    /// Handles legend item click.
    /// </summary>
    private async Task OnLegendItemClick()
    {
        if (Chart != null)
        {
            IsVisible = !IsVisible;
            await Chart.Refresh();
        }
    }


    /// <summary>
    /// Forces the series to update its display.
    /// </summary>
    internal void ForceUpdate()
    {
        StateHasChanged();
    }

}