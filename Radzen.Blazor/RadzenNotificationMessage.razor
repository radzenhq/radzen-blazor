@using System.Timers

@if (Visible)
{
   var classes = GetMessageCssClasses();

   <div aria-live="polite" class="rz-notification-item-wrapper @classes.Item1" style="@(Message.Click != null || Message.CloseOnClick ? "cursor: pointer;" : "") @Style">
      <div class="rz-notification-item">
         <div class="rz-notification-message-wrapper">
            <span class="notranslate rzi rz-notification-icon @classes.Item2" @onclick="NotificationClicked"></span>
            <div class="rz-notification-message" @onclick="NotificationClicked">
               <div class="rz-notification-title">@if (Message.SummaryContent != null) { @Message.SummaryContent(Service); } else { @((MarkupString)Message.Summary); }</div>
               <div class="rz-notification-content">@if (Message.DetailContent != null) { @Message.DetailContent(Service); } else { @((MarkupString)Message.Detail); }</div>
            </div>
         </div>
         <div class="notranslate rzi rz-notification-close" @onclick="@Close"></div>
      </div>
   </div>
}
@code {
   Tuple<string, string> GetMessageCssClasses()
   {
      if (Message.Severity == NotificationSeverity.Error)
      {
         return new Tuple<string, string>("rz-notification-error", "notranslate rzi-times");
      }
      else if (Message.Severity == NotificationSeverity.Info)
      {
         return new Tuple<string, string>("rz-notification-info", "notranslate rzi-info-circle");
      }
      else if (Message.Severity == NotificationSeverity.Success)
      {
         return new Tuple<string, string>("rz-notification-success", "notranslate rzi-check");
      }
      else if (Message.Severity == NotificationSeverity.Warning)
      {
         return new Tuple<string, string>("rz-notification-warn", "notranslate rzi-exclamation-triangle");
      }

      return new Tuple<string, string>("", "");
   }

   [Inject] private NotificationService Service { get; set; }

   public bool Visible { get; set; } = true;

   [Parameter]
   public NotificationMessage Message { get; set; }

   [Parameter]
   public string Style { get; set; }

   public void Close()
   {
      Service.Messages.Remove(Message);
      Message?.Close?.Invoke(Message);
      //System.Threading.Tasks.Task.Delay(0).ContinueWith(r => { Visible = false; });
   }

   protected override void OnInitialized()
   {
      System.Threading.Tasks.Task.Delay(Convert.ToInt32(Message.Duration ?? 3000)).ContinueWith(r => InvokeAsync(Close));
   }

   private void NotificationClicked()
   {
      if (Message.CloseOnClick)
         Close();

      Message?.Click?.Invoke(Message);
   }
}