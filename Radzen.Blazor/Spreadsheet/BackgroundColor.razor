@using Radzen.Blazor.Spreadsheet
@implements IDisposable

<RadzenColorPicker @bind-Value=@CurrentColor Disabled=@IsDisabled />

@code {
#nullable enable

    [Parameter]
    public Sheet? Sheet { get; set; }

    private string? CurrentColor
    {
        get
        {
            if (Sheet?.Cells.TryGet(Sheet.Selection.Cell.Row, Sheet.Selection.Cell.Column, out var cell) == true)
            {
                return cell.Format.BackgroundColor;
            }
            return null;
        }
        set
        {
            if (Sheet?.Cells.TryGet(Sheet.Selection.Cell.Row, Sheet.Selection.Cell.Column, out var cell) == true)
            {
                cell.Format.BackgroundColor = value;
            }
        }
    }

    private bool IsDisabled => Sheet?.Selection.Cell == CellRef.Invalid;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (Sheet?.Selection != null)
        {
            Sheet.Selection.Changed -= OnSelectionChanged;
        }

        await base.SetParametersAsync(parameters);

        if (Sheet?.Selection != null)
        {
            Sheet.Selection.Changed += OnSelectionChanged;
        }
    }

    private void OnSelectionChanged()
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        if (Sheet?.Selection != null)
        {
            Sheet.Selection.Changed -= OnSelectionChanged;
        }
    }
} 