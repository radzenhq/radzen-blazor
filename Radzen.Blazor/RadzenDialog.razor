@implements IDisposable
@using Microsoft.JSInterop
@using Radzen.Blazor.Rendering
@inject IJSRuntime JSRuntime
<style>
    /* Fade animations */
    .fade-in {
    animation: fadeIn 0.4s forwards;
    }

    .fade-out {
    animation: fadeOut 0.4s forwards;
    }

    @@keyframes fadeIn {
    from {
    opacity: 0;
    }
    to {
    opacity: 1;
    }
    }

    @@keyframes fadeOut {
    from {
    opacity: 1;
    }
    to {
    opacity: 0;
    }
    }

    /* Zoom animations */
    .zoom-in {
    animation: zoomIn 0.4s forwards;
    }

    .zoom-out {
    animation: zoomOut 0.4s forwards;
    }

    @@keyframes zoomIn {
    from {
    transform: scale(0.5);
    opacity: 0;
    }
    to {
    transform: scale(1);
    opacity: 1;
    }
    }

    @@keyframes zoomOut {
    from {
    transform: scale(1);
    opacity: 1;
    }
    to {
    transform: scale(0.5);
    opacity: 0;
    }
    }

    /* Slide-in/out right */
    .slide-in-right {
    animation: slideInRight 0.4s ease-out forwards;
    }

    .slide-out-right {
    animation: slideOutRight 0.4s ease-in forwards;
    }

    @@keyframes slideInRight {
    from {
    transform: translateX(100%);
    opacity: 0;
    }
    to {
    transform: translateX(0);
    opacity: 1;
    }
    }

    @@keyframes slideOutRight {
    from {
    transform: translateX(0);
    opacity: 1;
    }
    to {
    transform: translateX(100%);
    opacity: 0;
    }
    }

    /* Slide-in/out top */
    .slide-in-top {
    animation: slideInTop 0.4s ease-out forwards;
    }

    .slide-out-top {
    animation: slideOutTop 0.4s ease-in forwards;
    }

    @@keyframes slideInTop {
    from {
    transform: translateY(-100%);
    opacity: 0;
    }
    to {
    transform: translateY(0);
    opacity: 1;
    }
    }

    @@keyframes slideOutTop {
    from {
    transform: translateY(0);
    opacity: 1;
    }
    to {
    transform: translateY(-100%);
    opacity: 0;
    }
    }

    /* Slide-in/out bottom */
    .slide-in-bottom {
    animation: slideInBottom 0.4s ease-out forwards;
    }

    .slide-out-bottom {
    animation: slideOutBottom 0.4s ease-in forwards;
    }

    @@keyframes slideInBottom {
    from {
    transform: translateY(100%);
    opacity: 0;
    }
    to {
    transform: translateY(0);
    opacity: 1;
    }
    }

    @@keyframes slideOutBottom {
    from {
    transform: translateY(0);
    opacity: 1;
    }
    to {
    transform: translateY(100%);
    opacity: 0;
    }
    }

    /* Slide-in/out left */
    .slide-in-left {
    animation: slideInLeft 0.4s ease-out forwards;
    }

    .slide-out-left {
    animation: slideOutLeft 0.4s ease-in forwards;
    }

    @@keyframes slideInLeft {
    from {
    transform: translateX(-100%);
    opacity: 0;
    }
    to {
    transform: translateX(0);
    opacity: 1;
    }
    }

    @@keyframes slideOutLeft {
    from {
    transform: translateX(0);
    opacity: 1;
    }
    to {
    transform: translateX(-100%);
    opacity: 0;
    }
    }
</style>


@foreach (var dialog in dialogs)
{
    <DialogContainer @key=@dialog Dialog=@dialog ShowMask=@(dialog.Options.ShowMask == true && dialog==dialogs.LastOrDefault()) />
}

@if (isSideDialogOpen)
{
    <aside
    class="@($"{GetSideDialogCssClass()} {GetSideDialogAnimationCssClass()} {GetSideDialogShadowCssClass()}")"
    tabindex="@(isSideDialogOpen ? "0" : "-1")"
    style="@GetSideDialogStyle()"
    aria-labelledby="rz-dialog-side-label"
    >
        @if (sideDialogOptions.ShowTitle)
        {
            <div class="rz-dialog-side-titlebar">
                <div class="rz-dialog-side-title" style="display: inline" id="rz-dialog-side-label">@sideDialogOptions.Title</div>
                @if (sideDialogOptions.ShowClose)
                {
                    <a id="@(sideDialogOptions.GetHashCode() + "cl")" aria-label="@CloseSideDialogAriaLabel" @onclick:preventDefault="true" class="rz-dialog-side-titlebar-close" @onclick="@(_ => Service.CloseSide(null))" role="button" tabindex="@sideDialogOptions.CloseTabIndex">
                        <span class="notranslate rzi rzi-times"></span>
                    </a>
                }
            </div>
        }
        <div class="@SideDialogContentCssClass" style="@sideDialogOptions.Style">
            @sideDialogContent
        </div>
    </aside>
    @if (dialogs.Count == 0 && sideDialogOptions.ShowMask)
    {
        @if (sideDialogOptions.CloseDialogOnOverlayClick)
        {
            <div @onclick="@Service.CloseSide" class="rz-dialog-mask"></div>
        }
        else
        {
            <div class="rz-dialog-mask"></div>
        }
    }
}

@code {
    string SideDialogContentCssClass
    {
        get
        {
            var baseCss = "rz-dialog-side-content";
            return string.IsNullOrEmpty(sideDialogOptions.ContentCssClass) ? baseCss : $"{baseCss} {sideDialogOptions.ContentCssClass}";
        }

    }
    [Inject] 
    DialogService Service { get; set; }

    /// <summary>
    /// Gets or sets the close side dialog aria label text.
    /// </summary>
    /// <value>The close side dialog aria label text.</value>
    [Parameter]
    public string CloseSideDialogAriaLabel { get; set; } = "Close side dialog";

    List<Dialog> dialogs = new List<Dialog>();
    bool isSideDialogVisible = false;
    bool isSideDialogOpen = false;

    RenderFragment sideDialogContent;
    SideDialogOptions sideDialogOptions;

    public async Task Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        dialogs.Add(new Dialog() { Title = title, Type = type, Parameters = parameters, Options = options });

        await InvokeAsync(() => { StateHasChanged(); });
    }

    public async Task Close(dynamic result)
    {
        var lastDialog = dialogs.LastOrDefault();
        if (lastDialog != null)
        {
            dialogs.Remove(lastDialog);
            if (dialogs.Count==0) await JSRuntime.InvokeAsync<string>("Radzen.closeDialog");
        }

        await InvokeAsync(() => 
        { 
            StateHasChanged(); 
        });
    }

    public void Dispose()
    {
        Service.OnOpen -= OnOpen;
        Service.OnClose -= OnClose;

        Service.OnSideOpen -= OnSideOpen;
        Service.OnSideClose -= OnSideClose;
    }

    protected override void OnInitialized()
    {
        Service.OnOpen += OnOpen;
        Service.OnClose += OnClose;

        Service.OnSideOpen += OnSideOpen;
        Service.OnSideClose += OnSideClose;
    }

    void OnSideOpen(Type sideComponent, Dictionary<string, object> parameters, SideDialogOptions options)
    {
        sideDialogOptions = options;
        sideDialogContent = new RenderFragment(builder =>
        {
            builder.OpenComponent(0, sideComponent);
            foreach (var parameter in parameters)
            {
                builder.AddAttribute(1, parameter.Key, parameter.Value);
            }
            builder.CloseComponent();
        });
        isSideDialogOpen = true;
        StateHasChanged();
    }

    void OnSideClose(dynamic _)
    {
        isSideDialogOpen = false;  
        StateHasChanged();  
    }

    void OnOpen(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        Open(title, type, parameters, options).ConfigureAwait(false);
    }

    void OnClose(dynamic result)
    {
        Close(result).ConfigureAwait(false);
    }

    string GetSideDialogCssClass()
    {
        return $"rz-dialog-side rz-dialog-side-position-{sideDialogOptions.Position.ToString().ToLower()} {sideDialogOptions.CssClass}";
    }

    string GetSideDialogStyle()
    {
        string widthStyle = string.IsNullOrEmpty(sideDialogOptions.Width) ? string.Empty : $"width: {sideDialogOptions.Width};";
        string heightStyle = string.IsNullOrEmpty(sideDialogOptions.Height) ? string.Empty : $"height: {sideDialogOptions.Height};";

        return $"{widthStyle}{heightStyle}{sideDialogOptions.Style}";
    }

    private string GetSideDialogAnimationCssClass()
    {
        var dialogPosition = sideDialogOptions.Position.ToString().ToLower();
        return sideDialogOptions.Animation switch
        {
            DialogAnimation.None => string.Empty,
            DialogAnimation.Fade => isSideDialogOpen ? "fade-in" : "fade-out",
            DialogAnimation.Zoom => isSideDialogOpen ? "zoom-in" : "zoom-out",
            DialogAnimation.Slide => isSideDialogOpen ? $"slide-in-{dialogPosition}" : $"slide-out-{dialogPosition}",
            _ => string.Empty
        };
    }

    private string GetSideDialogShadowCssClass()
    {
        return sideDialogOptions.ShowShadow ? "rz-shadow-2" : string.Empty;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (isSideDialogOpen)
        {
            await JSRuntime.InvokeAsync<string>("Radzen.openSideDialog", sideDialogOptions);
        }
    }
}
