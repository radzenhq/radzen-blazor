@using Radzen
@using Radzen.Blazor.Rendering
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq.Expressions
@using System.Globalization
@using Microsoft.JSInterop

@typeparam TValue
@inherits RadzenComponent
@implements IRadzenFormComponent

@if (!Visible)
{
    return;
}

<div @ref="@Element" id="@GetId()" @attributes="@Attributes"
     class="rz-timespanpicker@(Disabled ? " rz-state-disabled" : "") @GetCssClass()" style="@ComponentStyle">
    @if (!Inline)
    {
        <input @ref="@input" type="text" name="@Name" id="@Name" value="@FormattedValue"
               disabled="@Disabled" readonly="@IsInputAllowed" autocomplete="off"
               class="rz-inputtext @InputClass @(ReadOnly ? "rz-readonly" : "") @(!ShowPopupButton ? "rz-input-trigger" : "")"
               placeholder="@Placeholder" tabindex="@(Disabled ? "-1" : TabIndex.ToString())" @attributes="@InputAttributes"
               @onchange="@(() => ParseTimeSpan())"
               @onclick="@(() => ClickInputField())" @onkeydown="@PressKey"
               @onkeydown:preventDefault="@_preventKeyPress" @onkeydown:stopPropagation />
        @if (ShowPopupButton)
        {
            <button type="button" aria-label="@TogglePopupAriaLabel" tabindex="-1"
                    class="rz-timespanpicker-trigger rz-button rz-button-icon-only@(Disabled ? " rz-state-disabled" : "") @(TogglePopupButtonClass)"
            @onclick="@ClickPopupButton">
                <span aria-hidden="true" class="notranslate rz-button-icon-left rzi rzi-timespan"></span><span class="rz-button-text"></span>
            </button>
        }
        @if (AllowClear && HasValue && (_isNullable || ConfirmedValue != DefaultNonNullValue) && !Disabled && !ReadOnly)
        {
            <i class="notranslate rz-dropdown-clear-icon rzi rzi-times" @onclick="@Clear" @onclick:stopPropagation="true"></i>
        }
    }
    <PopupOrInline @ref="@popupHolder" Inline="@Inline" PopupLazy="@(PopupRenderMode == PopupRenderMode.OnDemand)"
                   PopupOpen="@ResetUnconfirmedValue" PopupClose="@ResetUnconfirmedValue"
                   class="rz-timespanpicker-popup-container">
        <div class="rz-timespanpicker-panel"
             @onkeydown="@PopupKeyDown" @onmousedown:stopPropagation>
             <div class="rz-timespanpicker-panel-fieldcontainer">
                <RadzenSelectBar TValue="bool" Visible="@_canBeEitherPositiveOrNegative"
                                    Orientation="Orientation.Vertical" Size="ButtonSize.Small"
                                    Value="@_isUnconfirmedValueNegative"
                                    ValueChanged="@UpdateSign">
                    <Items>
                        <RadzenSelectBarItem Text="@PositiveButtonLabel" Value="false" />
                        <RadzenSelectBarItem Text="@NegativeButtonLabel" Value="true" />
                    </Items>
                </RadzenSelectBar>

                @if (_canBeEitherPositiveOrNegative is false)
                {
                    <div class="rz-sign">
                        <span>@(_isUnconfirmedValueNegative ? NegativeValueText : PositiveValueText)</span>
                    </div>
                }
                @if (FieldPrecision >= TimeSpanUnit.Day && TimeFieldsMaxValues[TimeSpanUnit.Day] > 0)
                {
                    <div class="rz-timespanpicker-panel-fieldwithunit">
                        <label for="@($"{UniqueID}-d")" class="rz-unit">@DaysUnitText</label>
                        <RadzenNumeric TValue="int" Name="@($"{UniqueID}-d")"
                                       Value="@Math.Abs(UnconfirmedValue.Days)"
                                       Min="0" Max="TimeFieldsMaxValues[TimeSpanUnit.Day]" Step="@DaysStep"
                                       Disabled="@Disabled" ReadOnly="@ReadOnly"
                                       class="rz-timespanpicker-days"
                                       Change="@UpdateDays" />
                    </div>
                }
                @if (FieldPrecision >= TimeSpanUnit.Hour && TimeFieldsMaxValues[TimeSpanUnit.Hour] > 0)
                {
                    <div class="rz-timespanpicker-panel-fieldwithunit">
                        <label for="@($"{UniqueID}-h")" class="rz-unit">@HoursUnitText</label>
                        <RadzenNumeric TValue="int" Name="@($"{UniqueID}-h")"
                                       Value="@Math.Abs(UnconfirmedValue.Hours)"
                                       Min="0" Max="TimeFieldsMaxValues[TimeSpanUnit.Hour]" Step="@HoursStep"
                                       Disabled="@Disabled" ReadOnly="@ReadOnly" Format="@(PadTimeValues ? "00" : null)"
                                       class="rz-timespanpicker-hours"
                                       Change="@UpdateHours" />
                    </div>
                }
                @if (FieldPrecision >= TimeSpanUnit.Minute && TimeFieldsMaxValues[TimeSpanUnit.Minute] > 0)
                {
                    <div class="rz-timespanpicker-panel-fieldwithunit">
                        <label for="@($"{UniqueID}-m")" class="rz-unit">@MinutesUnitText</label>
                        <RadzenNumeric TValue="int" Name="@($"{UniqueID}-m")"
                                       Value="@Math.Abs(UnconfirmedValue.Minutes)"
                                       Min="0" Max="TimeFieldsMaxValues[TimeSpanUnit.Minute]" Step="@MinutesStep"
                                       Disabled="@Disabled" ReadOnly="@ReadOnly" Format="@(PadTimeValues ? "00" : null)"
                                       class="rz-timespanpicker-minutes"
                                       Change="@UpdateMinutes" />
                    </div>
                }
                @if (FieldPrecision >= TimeSpanUnit.Second && TimeFieldsMaxValues[TimeSpanUnit.Second] > 0)
                {
                    <div class="rz-timespanpicker-panel-fieldwithunit">
                        <label for="@($"{UniqueID}-s")" class="rz-unit">@SecondsUnitText</label>
                        <RadzenNumeric TValue="int" Name="@($"{UniqueID}-s")"
                                       Value="@Math.Abs(UnconfirmedValue.Seconds)"
                                       Min="0" Max="TimeFieldsMaxValues[TimeSpanUnit.Second]" Step="@SecondsStep"
                                       Disabled="@Disabled" ReadOnly="@ReadOnly" Format="@(PadTimeValues ? "00" : null)"
                                       class="rz-timespanpicker-seconds"
                                       Change="@UpdateSeconds" />
                    </div>
                }
                @if (FieldPrecision >= TimeSpanUnit.Millisecond && TimeFieldsMaxValues[TimeSpanUnit.Millisecond] > 0)
                {
                    <div class="rz-timespanpicker-panel-fieldwithunit">
                        <label for="@($"{UniqueID}-ms")" class="rz-unit">@MillisecondsUnitText</label>
                        <RadzenNumeric TValue="int" Name="@($"{UniqueID}-ms")"
                                       Value="@Math.Abs(UnconfirmedValue.Milliseconds)"
                                       Min="0" Max="TimeFieldsMaxValues[TimeSpanUnit.Millisecond]" Step="@MillisecondsStep"
                                       Disabled="@Disabled" ReadOnly="@ReadOnly" Format="@(PadTimeValues ? "00" : null)"
                                       class="rz-timespanpicker-milliseconds"
                                       Change="@UpdateMilliseconds" />
                    </div>
                }
                @{
                    #if NET7_0_OR_GREATER
                    if (FieldPrecision >= TimeSpanUnit.Microsecond && TimeFieldsMaxValues[TimeSpanUnit.Microsecond] > 0)
                    {
                        <div class="rz-timespanpicker-panel-fieldwithunit">
                            <label for="@($"{UniqueID}-us")" class="rz-unit">@MicrosecondsUnitText</label>
                            <RadzenNumeric TValue="int" Name="@($"{UniqueID}-us")"
                                           Value="@Math.Abs(UnconfirmedValue.Microseconds)"
                                           Min="0" Max="TimeFieldsMaxValues[TimeSpanUnit.Microsecond]" Step="@MicrosecondsStep"
                                           Disabled="@Disabled" ReadOnly="@ReadOnly" Format="@(PadTimeValues ? "00" : null)"
                                           class="rz-timespanpicker-microseconds"
                                           Change="@UpdateMicroseconds" />
                        </div>
                    }
                    #endif
                }
            </div>

            @if (ShowConfirmationButton)
            {
                <button type="button" class="rz-button rz-button-md rz-secondary" tabindex="0" @onclick="@(() => ConfirmValue())">
                    <span class="rz-button-text">@ConfirmationButtonLabel</span>
                </button>
            }
        </div>
    </PopupOrInline>
</div>
