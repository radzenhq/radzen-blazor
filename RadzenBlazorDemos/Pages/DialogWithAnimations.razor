@inject DialogService DialogService

<div class="rz-p-12 rz-text-align-center">
    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" AlignItems="AlignItems.Center" class="rz-p-4 rz-mb-6 rz-border-radius-1" Style="border: var(--rz-grid-cell-border);" Wrap="FlexWrap.Wrap">
        <RadzenRow>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
                <RadzenLabel Text="Animation:" Component="Animation" />
                <RadzenSelectBar @bind-Value="@animation" TextProperty="Text" ValueProperty="Value" Name="Animation"
                                 Data="@(Enum.GetValues(typeof(DialogAnimation)).Cast<DialogAnimation>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small" />
            </RadzenStack>
        </RadzenRow>
        <RadzenRow>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
                <RadzenLabel Text="Show shadow:" Component="Shadow" />
                <RadzenSwitch @bind-Value="@showShadow" Name="Shadow" />
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
                <RadzenLabel Text="Show mask:" Component="Mask" />
                <RadzenSwitch @bind-Value="@showMask" Name="Mask" />
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
                <RadzenLabel Text="Close on overlay click:" Component="Close" />
                <RadzenSwitch @bind-Value="@closeDialogOnOverlayClick" Disabled=@(!showMask) Name="Close" />
            </RadzenStack>
        </RadzenRow>
    </RadzenStack>
    <RadzenButton Text="Dialog with animations" ButtonStyle="ButtonStyle.Secondary" Click="@OpenDialog" />
</div>

@code {
    DialogAnimation animation;
    bool closeDialogOnOverlayClick;
    bool showMask;
    bool showShadow;
    async Task OpenDialog()
    {
        await DialogService.OpenAsync("Animated Dialog", ds =>
    @<div>
        @if (animation == DialogAnimation.None)
        {
            <p>Dialog with no animation</p>
        }
        else
        {
            <p>Dialog with animation: @animation</p>
        }
    </div>, new DialogOptions() { CloseDialogOnOverlayClick = closeDialogOnOverlayClick, ShowMask = showMask, ShowShadow = showShadow, Animation = animation });
    }
}