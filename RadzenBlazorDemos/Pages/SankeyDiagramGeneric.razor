@using Radzen.Blazor
@using System.Collections.Generic

<RadzenStack class="rz-p-0 rz-p-md-6 rz-p-lg-12">
    <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H2">
        Generic Sankey Chart with Custom Data Types
    </RadzenText>
    <RadzenText TextStyle="TextStyle.Body1" class="rz-pb-4">
        This example demonstrates using the generic RadzenSankeyDiagram with custom data models,
        similar to how RadzenChart and RadzenScheduler work.
    </RadzenText>

    <RadzenCard class="w-100">
        <RadzenSankeyDiagram TNode="ProcessStep" TLink="ProcessFlow" 
                           Nodes="@processSteps" 
                           Links="@processFlows"
                           NodeIdProperty="@nameof(ProcessStep.StepId)"
                           NodeLabelProperty="@nameof(ProcessStep.Name)"
                           NodeFillProperty="@nameof(ProcessStep.Color)"
                           LinkSourceProperty="@nameof(ProcessFlow.FromStep)"
                           LinkTargetProperty="@nameof(ProcessFlow.ToStep)"
                           LinkValueProperty="@nameof(ProcessFlow.Amount)"
                           LinkFillProperty="@nameof(ProcessFlow.FlowColor)"
                           Style="width: 100%; height: 400px"
                           NodeWidth="24" NodePadding="8"
                           MarginLeft="10" MarginRight="10" MarginTop="10" MarginBottom="10">
        </RadzenSankeyDiagram>
    </RadzenCard>

    <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H2" class="rz-pt-8">
        Using Color Scheme Instead of Explicit Colors
    </RadzenText>
    <RadzenText TextStyle="TextStyle.Body1" class="rz-pb-4">
        This example uses the ColorScheme property to automatically assign colors.
    </RadzenText>

    <RadzenCard class="w-100">
        <RadzenSankeyDiagram TNode="Department" TLink="Budget" 
                           Nodes="@departments" 
                           Links="@budgets"
                           NodeIdProperty="@nameof(Department.Code)"
                           NodeLabelProperty="@nameof(Department.Name)"
                           LinkSourceProperty="@nameof(Budget.From)"
                           LinkTargetProperty="@nameof(Budget.To)"
                           LinkValueProperty="@nameof(Budget.Amount)"
                           ColorScheme="ColorScheme.Palette"
                           Style="width: 100%; height: 400px"
                           NodeWidth="30" NodePadding="10">
        </RadzenSankeyDiagram>
    </RadzenCard>
</RadzenStack>

@code {
    // Custom data models for the first example
    public class ProcessStep
    {
        public string StepId { get; set; }
        public string Name { get; set; }
        public string Color { get; set; }
    }

    public class ProcessFlow
    {
        public string FromStep { get; set; }
        public string ToStep { get; set; }
        public double Amount { get; set; }
        public string FlowColor { get; set; }
    }

    // Data for the first example
    private List<ProcessStep> processSteps = new List<ProcessStep>
    {
        new ProcessStep { StepId = "raw", Name = "Raw Materials", Color = "#3B82F6" },
        new ProcessStep { StepId = "proc1", Name = "Processing 1", Color = "#10B981" },
        new ProcessStep { StepId = "proc2", Name = "Processing 2", Color = "#F59E0B" },
        new ProcessStep { StepId = "qa", Name = "Quality Check", Color = "#EF4444" },
        new ProcessStep { StepId = "prod1", Name = "Product A", Color = "#8B5CF6" },
        new ProcessStep { StepId = "prod2", Name = "Product B", Color = "#EC4899" },
        new ProcessStep { StepId = "waste", Name = "Waste", Color = "#6B7280" }
    };

    private List<ProcessFlow> processFlows = new List<ProcessFlow>
    {
        new ProcessFlow { FromStep = "raw", ToStep = "proc1", Amount = 100, FlowColor = "#3B82F680" },
        new ProcessFlow { FromStep = "raw", ToStep = "proc2", Amount = 50, FlowColor = "#3B82F680" },
        new ProcessFlow { FromStep = "proc1", ToStep = "qa", Amount = 90, FlowColor = "#10B98180" },
        new ProcessFlow { FromStep = "proc1", ToStep = "waste", Amount = 10, FlowColor = "#10B98180" },
        new ProcessFlow { FromStep = "proc2", ToStep = "qa", Amount = 45, FlowColor = "#F59E0B80" },
        new ProcessFlow { FromStep = "proc2", ToStep = "waste", Amount = 5, FlowColor = "#F59E0B80" },
        new ProcessFlow { FromStep = "qa", ToStep = "prod1", Amount = 80, FlowColor = "#EF444480" },
        new ProcessFlow { FromStep = "qa", ToStep = "prod2", Amount = 50, FlowColor = "#EF444480" },
        new ProcessFlow { FromStep = "qa", ToStep = "waste", Amount = 5, FlowColor = "#EF444480" }
    };

    // Custom data models for the second example
    public class Department
    {
        public string Code { get; set; }
        public string Name { get; set; }
    }

    public class Budget
    {
        public string From { get; set; }
        public string To { get; set; }
        public double Amount { get; set; }
    }

    // Data for the second example
    private List<Department> departments = new List<Department>
    {
        new Department { Code = "rev", Name = "Revenue" },
        new Department { Code = "ops", Name = "Operations" },
        new Department { Code = "sales", Name = "Sales" },
        new Department { Code = "rd", Name = "R&D" },
        new Department { Code = "hr", Name = "HR" },
        new Department { Code = "it", Name = "IT" },
        new Department { Code = "mkt", Name = "Marketing" }
    };

    private List<Budget> budgets = new List<Budget>
    {
        new Budget { From = "rev", To = "ops", Amount = 3000000 },
        new Budget { From = "rev", To = "sales", Amount = 2000000 },
        new Budget { From = "rev", To = "rd", Amount = 1500000 },
        new Budget { From = "ops", To = "hr", Amount = 500000 },
        new Budget { From = "ops", To = "it", Amount = 800000 },
        new Budget { From = "ops", To = "mkt", Amount = 300000 },
        new Budget { From = "sales", To = "mkt", Amount = 700000 },
        new Budget { From = "rd", To = "it", Amount = 400000 }
    };
}