@using System.ComponentModel.DataAnnotations
@using System.Data
@using System.Reflection

<RadzenDataGrid Data=@employees AllowFiltering="true" FilterMode="FilterMode.CheckBoxList" AllowPaging="true" AllowSorting="true" ColumnWidth="200px">
    <Columns>
        <RadzenDataGridColumn Property="@colProperty(nameof(Employee.ID))" Type="@colType(nameof(Employee.ID))" Title="ID" />
        <RadzenDataGridColumn Property="@colProperty(nameof(Employee.Gender))" Type="@colType(nameof(Employee.Gender))" Title="Gender" />
        <RadzenDataGridColumn Property="@colProperty(nameof(Employee.Status))" Type="@colType(nameof(Employee.Status))" Title="Nullable Status" />
        <RadzenDataGridColumn Property="@colProperty(nameof(Employee.Color))" Type="@colType(nameof(Employee.Color))" Title="Favorite Color (Display Attribute in Filter)" />
    </Columns>
</RadzenDataGrid>

@code {
    DataTable employeesTable;
    IEnumerable<DataRow> employees => employeesTable != null ? employeesTable?.AsEnumerable() : new List<DataRow>();

    public class Employee
    {
        public int ID { get; set; }
        public GenderType Gender { get; set; }
        public StatusType? Status { get; set; }
        public ColorType Color { get; set; }
    }

    public enum GenderType
    {
        Ms,
        Mr,
        Unknown,
    }

    public enum ColorType
    {
        Red,
        Green,
        Blue,
        [Display(Description = "Almond Green")]
        AlmondGreen,
        [Display(Description = "Amber Gray")]
        AmberGray,
        [Display(Description = "Apple Blue... ")]
        AppleBlueSeaGreen,
        //[Display(Description = "Miss", ResourceType = typeof(ResourceFile)] localization example
        [Display(Description = "Azure")]
        AzureBlue,

    }

    public enum StatusType
    {
        Inactive,
        Active,
    }

    protected override void OnInitialized()
    {
        var localEmpl = Enumerable.Range(0, 10).Select(i =>
            new Employee
            {
                ID = i,
                Gender = i < 3 ? GenderType.Mr : i < 6 ? GenderType.Ms : GenderType.Unknown,
                Status = i < 3 ? StatusType.Active : i < 6 ? StatusType.Inactive : null,
                Color = i < 2 ? ColorType.Red: i < 4 ? ColorType.AlmondGreen : i < 6 ? ColorType.AppleBlueSeaGreen : ColorType.AzureBlue,
            });

        employeesTable = GetDataTable<Employee>(localEmpl);
    }


    private DataTable GetDataTable<T>(IEnumerable<T> employees)
    {
        DataTable dataTable = new DataTable(typeof(T).Name);

        PropertyInfo[] properties = typeof(T).GetProperties();
        foreach (PropertyInfo property in properties)
        {
            DataColumn col = new(property.Name, Nullable.GetUnderlyingType(property.PropertyType) ?? property.PropertyType);
            col.AllowDBNull = Nullable.GetUnderlyingType(property.PropertyType) != null || !property.PropertyType.IsValueType;
            dataTable.Columns.Add(col);
        }
        foreach (T item in employees)
        {
            DataRow row = dataTable.NewRow();
            foreach (PropertyInfo property in properties)
            {
                row[property.Name] = property.GetValue(item, null) ?? DBNull.Value;
            }
            dataTable.Rows.Add(row);
        }

        return dataTable;
    }

    private string colProperty(string colName)
    {
        if (employeesTable == null || !employeesTable.Columns.Contains(colName))
        {
            return string.Empty; // Default type if the table is not initialized
        }
        return $"ItemArray[{employeesTable.Columns.IndexOf(colName)}]";
    }
    private Type colType(string colName)
    {
        if (employeesTable == null || !employeesTable.Columns.Contains(colName))
        {
            return typeof(string); // Default type if the table is not initialized
        }
        return DataColType(employeesTable.Columns[colName]);
    }

    private Type DataColType(DataColumn dataCol) => dataCol.AllowDBNull && dataCol.DataType.IsValueType
        ? typeof(Nullable<>).MakeGenericType(dataCol.DataType)
        : dataCol.DataType;
}
